################################
# Data set 
################################

# relative data folder location 
#datafolder = /Users/jacobschroder/joint_repos/DNN_PinT/data
#datafolder = /space/eccyr/Projects/ECRP/Code/convnet/mnist_converter
datafolder = /Users/eccyr/Projects/ECRP/Code/xbraid-connets/mnist_converter
# training examples filename
ftrain_ex = MNIST_Ytrain.dat
# training labels/classes filename 
ftrain_labels = MNIST_Ctrain.dat
# validation examples filename
fval_ex = MNIST_Yval.dat
# validation labels/classes filename
fval_labels = MNIST_Cval.dat
# number of training data elements (those will be read in! change actual batch size below!)
ntraining = 10
# number of validation data elements (those will be read in!)
nvalidation = 10
# number of features in training and validation examples 
nfeatures = 784
# number of labels/classes
nclasses = 10

# filename for opening weights and bias (set to NONE if not given)
weightsopenfile = NONE
# filename for classification weights and bias (set to NONE if not given)
weightsclassificationfile = NONE

################################
# Neural Network  
################################

# number of channels for (convolutional networks this is nfeatures times the number of convolutions)
#    6272 => 8 output channels, 4784 => 6, 3920 => 5, 3136 => 4
nchannels = 3136
# number of layers (including opening layer and classification layer) (nlayer >= 3 !)
nlayers = 32    
# final time
T = 5.0
# Activation function ("tanh" or "ReLu" or "SmoothReLu")
activation = tanh 
# Type of network ("dense" the default, or "convolutional")
network_type = convolutional
# Opening layer type.  
#  "replicate": replicate image for each convolution.  
#  "activate": same as replicate, only apply tuned, shifted tanh activation function for MNIST. 
type_openlayer = activate 
# factor for scaling initial opening layer weights and bias
weights_open_init = 1e-3
# factor for scaling initial weights and bias of intermediate layers
weights_init = 1e-3
# factor for scaling initial classification weights and bias 
weights_class_init = 1e-3

################################
#BRAID 
################################

# coarsening factor on level 0
#   generally, cfactor0 = nlayers / P_t
#   where P_t is the processors in time, and nlayers is the number of time-steps
braid_cfactor0 = 4
# coarsening factor (usually 4 is the best value here) 
braid_cfactor = 4 
# maximum number of levels 
braid_maxlevels = 15
# minimum allowed coarse time time grid size (values in 10-30 are usually best)
braid_mincoarse = 10
# maximum number of iterations (talk to Stefanie on good value here)
braid_maxiter = 10
# absolute tolerance (talk to Stefanie on good value here)
braid_abstol = 1e-10
# absolute adjoint tolerance  (talk to Stefanie on good value here)
braid_adjtol = 1e-10
# printlevel
braid_printlevel = 1
# access level
braid_accesslevel = 0 
# skip work on downcycle
braid_setskip = 0 
# V-cycle (0) or full multigrid  (1)
braid_fmg = 0
# Number of CF relaxations (1 is a good value)
braid_nrelax = 1 
# Number of CF relaxations on level 0  (1 or 0 are usually the best values)
braid_nrelax0 = 0

####################################
#Optimization
####################################
# Type of batch selection ("deterministic" or "stochastic")
batch_type = deterministic
# Batch size
nbatch = 10
# relaxation param for tikhonov term
gamma_tik = 1e-7
# relaxation param for time-derivative term
gamma_ddt = 1e-7
# relaxation param for tikhonov term of classification weights 
gamma_class = 1e-7
# stepsize selection type ("fixed" or "backtrackingLS" or "oneoverk")
# determines how to choose alpha in design update x_new = x_old - alpha * direction
# fixed          : constant alpha being the initial stepsize
# backtrackingLS : find alpha from backtracking linesearch, starting at initial stepsize
# oneoverk       : alpha = 1/k  where k is the current optimization iteration index
stepsize_type = backtrackingLS
# initial stepsize
stepsize = 1.0
# maximum number of optimization iterations
optim_maxiter = 24
# absolute stopping criterion for the gradient norm
gtol = 1e-4
# maximum number of linesearch iterations
ls_maxiter = 20
# factor for modifying the stepsize within a linesearch iteration
ls_factor = 0.5
# Hessian Approximation ("BFGS", "L-BFGS" or "Identity")
hessian_approx = L-BFGS 
# number of stages for l-bfgs method 
lbfgs_stages = 20
# level for validation computation: 
#  -1 = never validate
#   0 = validate only after optimization finishes. 
#   1 = validate in each optimization iteration
validationlevel = 0
